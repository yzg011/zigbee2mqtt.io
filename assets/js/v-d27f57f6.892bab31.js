"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[42330],{86844:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-d27f57f6",path:"/guide/installation/02_docker.html",title:"Docker",lang:"en-US",frontmatter:{next:"../configuration/",pageClass:"content-page"},excerpt:"",headers:[{level:2,title:"Creating the initial configuration",slug:"creating-the-initial-configuration",children:[]},{level:2,title:"Running the container",slug:"running-the-container",children:[{level:3,title:"Rootless container",slug:"rootless-container",children:[]}]},{level:2,title:"Updating",slug:"updating",children:[]},{level:2,title:"Tags",slug:"tags",children:[]},{level:2,title:"Docker Compose",slug:"docker-compose",children:[{level:3,title:"Starting the container",slug:"starting-the-container",children:[]},{level:3,title:"Updating",slug:"updating-1",children:[]}]},{level:2,title:"Notes for Raspberry Pi users",slug:"notes-for-raspberry-pi-users",children:[]},{level:2,title:"Docker Stack device mapping",slug:"docker-stack-device-mapping",children:[{level:3,title:"Troubleshooting",slug:"troubleshooting",children:[]}]},{level:2,title:"Docker on Synology DSM 7.0",slug:"docker-on-synology-dsm-7-0",children:[]}],filePathRelative:"guide/installation/02_docker.md",git:{updatedTime:1661706754e3}}},16954:(n,s,e)=>{e.r(s),e.d(s,{default:()=>E});var a=e(66252);const t=(0,a._)("h1",{id:"docker",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#docker","aria-hidden":"true"},"#"),(0,a.Uk)(" Docker")],-1),l=(0,a.Uk)("It is possible to run Zigbee2MQTT in a Docker container using the official "),p={href:"https://hub.docker.com/r/koenkk/zigbee2mqtt/",target:"_blank",rel:"noopener noreferrer"},r=(0,a.Uk)("Zigbee2MQTT Docker image"),o=(0,a.Uk)("."),i=(0,a._)("p",null,[(0,a.Uk)("This image support the following architectures: "),(0,a._)("code",null,"386"),(0,a.Uk)(", "),(0,a._)("code",null,"amd64"),(0,a.Uk)(", "),(0,a._)("code",null,"arm/v6"),(0,a.Uk)(", "),(0,a._)("code",null,"arm/v7"),(0,a.Uk)(", "),(0,a._)("code",null,"arm64"),(0,a.Uk)(". Since Zigbee2MQTT images are manifest listed, Docker will auto-detect the architecture and pull the right image.")],-1),c=(0,a.Uk)("Start by figuring out the location of your adapter as explained "),u=(0,a.Uk)("here"),b=(0,a.Uk)("."),d=(0,a.uE)('<p><strong>IMPORTANT</strong>: Using a Raspberry Pi? Make sure to check <a href="#notes-for-raspberry-pi-users">Notes for Raspberry Pi users</a>.</p><h2 id="creating-the-initial-configuration" tabindex="-1"><a class="header-anchor" href="#creating-the-initial-configuration" aria-hidden="true">#</a> Creating the initial configuration</h2><p>Navigate to the directory where you whish to store the Zigbee2MQTT data and execute:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">wget</span> https://raw.githubusercontent.com/Koenkk/zigbee2mqtt/master/data/configuration.yaml -P data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),m=(0,a.Uk)("Now configure the MQTT server, adapter location, network key and frontend as explained "),k=(0,a.Uk)("here"),g=(0,a.Uk)("."),h=(0,a.uE)('<h2 id="running-the-container" tabindex="-1"><a class="header-anchor" href="#running-the-container" aria-hidden="true">#</a> Running the container</h2><p>Execute the following command, update the <code>--device</code> parameter to match the location of your adapter.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token punctuation">\\</span>\n   --name zigbee2mqtt <span class="token punctuation">\\</span>\n   --restart<span class="token operator">=</span>unless-stopped <span class="token punctuation">\\</span>\n   --device<span class="token operator">=</span>/dev/ttyACM0 <span class="token punctuation">\\</span>\n   -p <span class="token number">8080</span>:8080 <span class="token punctuation">\\</span>\n   -v <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/data:/app/data <span class="token punctuation">\\</span>\n   -v /run/udev:/run/udev:ro <span class="token punctuation">\\</span>\n   -e <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Europe/Amsterdam <span class="token punctuation">\\</span>\n   koenkk/zigbee2mqtt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>Parameters explanation:</strong></p><ul><li><code>--name zigbee2mqtt</code>: Name of container</li><li><code>--restart=unless-stopped</code>: Automatically start on boot and restart after a crash</li><li><code>--device=/dev/ttyACM0</code>: Location of adapter (e.g. CC2531)</li><li><code>-v $(pwd)/data:/app/data</code>: Directory where Zigbee2MQTT stores it configuration (pwd maps to the current working directory)</li><li><code>-v /run/udev:/run/udev:ro</code>: only required for auto-detecting the port and some adapters like ConBee</li><li><code>-e TZ=Europe/Amsterdam</code>: Configure the timezone</li><li><code>-p 8080:8080</code>: port forwarding from inside Docker container to host (for the frontend)</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you run the MQTT-Server on the same host (localhost) you could use the IP of the <code>docker0</code> bridge to establish the connection: <code>server: mqtt://172.17.0.1</code>.</p></div><h3 id="rootless-container" tabindex="-1"><a class="header-anchor" href="#rootless-container" aria-hidden="true">#</a> Rootless container</h3><p>To improve the security of the deployment you may want to run Zigbee2MQTT as a <em>non-root</em> user.</p><ol><li>Identify the group that has access to the adapter (in Ubuntu, e.g. it might be assigned to <code>dialout</code>). Update <code>ttyACM0</code> to match your adapter location.</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ ls -l /dev/ttyACM0\ncrw-rw---- 1 root dialout 166, 0 Nov 5 16:31 /dev/ttyACM0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>If you want to run Zigbee2MQTT using your current user find the <code>uid</code> (UserID) and <code>gid</code> (GroupID):</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ id\nuid=1001(pi) gid=1001(pi) Groups=...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>Start the docker container after updating <code>device</code>, <code>user</code> (uid:gid) and <code>group-add</code>:</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ sudo docker run \\\n   --name=zigbee2mqtt \\\n   --restart=unless-stopped \\\n   -p 8080:8080 \\\n   -v $(pwd)/data:/app/data \\\n   -v /run/udev:/run/udev:ro \\\n   --device=/dev/ttyACM0 \\\n   --user 1001:1001 \\\n   --group-add dialout \\\n   -e TZ=Europe/Amsterdam \\\n   koenkk/zigbee2mqtt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>3.1</p><p><strong>Parameters explanation:</strong></p><ul><li><code>--user 1001:1001</code>: Run the Zigbee2MQTT process within the container using the provided UserID and GroupID</li><li><code>--group-add dialout</code>: Assign the <code>dialout</code> group to the user to be able to access the device</li></ul><h2 id="updating" tabindex="-1"><a class="header-anchor" href="#updating" aria-hidden="true">#</a> Updating</h2><p>To update to the latest Docker image:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> pull koenkk/zigbee2mqtt:latest\n<span class="token function">docker</span> <span class="token function">rm</span> -f zigbee2mqtt\n<span class="token comment"># Now run the container again with the instructions above</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="tags" tabindex="-1"><a class="header-anchor" href="#tags" aria-hidden="true">#</a> Tags</h2><p>The following tags are available:</p>',22),v=(0,a._)("li",null,[(0,a.Uk)("Latest release version: "),(0,a._)("code",null,"latest")],-1),f=(0,a.Uk)("Latest dev version (based on "),y={href:"https://github.com/Koenkk/zigbee2mqtt/tree/dev",target:"_blank",rel:"noopener noreferrer"},x=(0,a._)("code",null,"dev",-1),w=(0,a.Uk)(" branch): "),T=(0,a._)("code",null,"latest-dev",-1),D=(0,a._)("li",null,[(0,a.Uk)("Specific release version, e.g: "),(0,a._)("code",null,"1.7.0")],-1),C=(0,a.uE)('<h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker Compose</h2><p>Example of a Docker Compose file:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">zigbee2mqtt</span><span class="token punctuation">:</span>\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zigbee2mqtt\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> koenkk/zigbee2mqtt\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/app/data\n      <span class="token punctuation">-</span> /run/udev<span class="token punctuation">:</span>/run/udev<span class="token punctuation">:</span>ro\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token comment"># Frontend port</span>\n      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> TZ=Europe/Berlin\n    <span class="token key atrule">devices</span><span class="token punctuation">:</span>\n      <span class="token comment"># Make sure this matched your adapter location</span>\n      <span class="token punctuation">-</span> /dev/ttyUSB0<span class="token punctuation">:</span>/dev/ttyACM0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>You can also run a rootless container with docker-compose by adding the required attributes to the <code>zigbee2mqtt</code> service block in your <code>docker-compose.yml</code>:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>    <span class="token key atrule">group_add</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> dialout\n    <span class="token key atrule">user</span><span class="token punctuation">:</span> 1000<span class="token punctuation">:</span><span class="token number">1000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="starting-the-container" tabindex="-1"><a class="header-anchor" href="#starting-the-container" aria-hidden="true">#</a> Starting the container</h3><p>To start the Docker container:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker-compose</span> up -d zigbee2mqtt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>You can optionally skip <code>zigbee2mqtt</code> and it will start all containers listed in the compose file.</p><h3 id="updating-1" tabindex="-1"><a class="header-anchor" href="#updating-1" aria-hidden="true">#</a> Updating</h3><p>To update to the latest Docker image:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker-compose</span> pull zigbee2mqtt\n<span class="token function">docker-compose</span> up -d zigbee2mqtt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>You can optionally skip <code>zigbee2mqtt</code> and it will pull any new images for all containers in the compose file, and then restart those that were updated.</p><h2 id="notes-for-raspberry-pi-users" tabindex="-1"><a class="header-anchor" href="#notes-for-raspberry-pi-users" aria-hidden="true">#</a> Notes for Raspberry Pi users</h2><ul><li>If you are running Raspbian Buster (not Bullseye!) (find out by executing <code>grep &quot;PRETTY_NAME&quot; /etc/os-release</code>) you need to install <code>libseccomp2</code>, this can be done by executing the following commands:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> apt-key adv --keyserver hkps://keyserver.ubuntu.com:443 --recv-keys 04EE7237B7D453EC 648ACFD622F3D138\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;deb http://httpredir.debian.org/debian buster-backports main contrib non-free&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> -a <span class="token string">&quot;/etc/apt/sources.list.d/debian-backports.list&quot;</span>\n<span class="token function">sudo</span> <span class="token function">apt</span> update\n<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libseccomp2 -t buster-backports\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>If you do not do this you will get the following error when starting the Zigbee2MQTT container:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#</span>\n<span class="token comment"># Fatal error in , line 0</span>\n<span class="token comment"># unreachable code</span>\n<span class="token comment">#</span>\n<span class="token comment">#</span>\n<span class="token comment">#</span>\n<span class="token comment">#FailureMessage Object: 0x7eace25c</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>For Raspberry Pi 1 and zero users: there is a bug in Docker which selects the wrong image architecture. Before executing <code>docker run</code> pull the correct image with <code>docker pull koenkk/zigbee2mqtt --platform linux/arm/v6</code>.</li></ul><h2 id="docker-stack-device-mapping" tabindex="-1"><a class="header-anchor" href="#docker-stack-device-mapping" aria-hidden="true">#</a> Docker Stack device mapping</h2><p><em>This is only relevant when using Docker Stack</em></p><p>Docker stack doesn&#39;t support device mappings with option <code>--devices</code> when deploying a stack in Swam mode. A workaround is to bind the device as volume binding and set the right permissions.</p>',22),q=(0,a.Uk)("The workaround is based on the solution found at "),S={href:"https://github.com/docker/swarmkit/issues/1244#issuecomment-285935430",target:"_blank",rel:"noopener noreferrer"},U=(0,a.Uk)('Add support for devices with "service create"'),z=(0,a.Uk)(", all credits goes this him."),I=(0,a.uE)('<ol><li><p>Identify serial adapter Identify the serial adapter using the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> lsusb -v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Bus 001 Device 005: ID 0451:16a8 Texas Instruments, Inc.\nDevice Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               2.00\n  bDeviceClass            2 Communications\n  bDeviceSubClass         0\n  bDeviceProtocol         0\n  bMaxPacketSize0        32\n  idVendor           0x0451 Texas Instruments, Inc.\n  idProduct          0x16a8\n  bcdDevice            0.09\n  iManufacturer           1 Texas Instruments\n  iProduct                2 TI CC2531 USB CDC\n  iSerial                 3 __0X00124B001936AC60\n  bNumConfigurations      1\n  Configuration Descriptor:\n\tbLength                 9\n\tbDescriptorType         2\n\twTotalLength           67\n\tbNumInterfaces          2\n\tbConfigurationValue     1\n\tiConfiguration          0\n\tbmAttributes         0x80\n\t  (Bus Powered)\n\tMaxPower               50mA\n\tInterface Descriptor:\n\t  bLength                 9\n\t  bDescriptorType         4\n\t  bInterfaceNumber        0\n\t  bAlternateSetting       0\n\t  bNumEndpoints           1\n\t  bInterfaceClass         2 Communications\n\t  bInterfaceSubClass      2 Abstract (modem)\n\t  bInterfaceProtocol      1 AT-commands (v.25ter)\n\t  iInterface              0\n\t  CDC Header:\n\t\tbcdCDC               1.10\n\t  CDC ACM:\n\t\tbmCapabilities       0x02\n\t\t  line coding and serial state\n\t  CDC Union:\n\t\tbMasterInterface        0\n\t\tbSlaveInterface         1\n\t  CDC Call Management:\n\t\tbmCapabilities       0x00\n\t\tbDataInterface          1\n\t  Endpoint Descriptor:\n\t\tbLength                 7\n\t\tbDescriptorType         5\n\t\tbEndpointAddress     0x82  EP 2 IN\n\t\tbmAttributes            3\n\t\t  Transfer Type            Interrupt\n\t\t  Synch Type               None\n\t\t  Usage Type               Data\n\t\twMaxPacketSize     0x0040  1x 64 bytes\n\t\tbInterval              64\n\tInterface Descriptor:\n\t  bLength                 9\n\t  bDescriptorType         4\n\t  bInterfaceNumber        1\n\t  bAlternateSetting       0\n\t  bNumEndpoints           2\n\t  bInterfaceClass        10 CDC Data\n\t  bInterfaceSubClass      0 Unused\n\t  bInterfaceProtocol      0\n\t  iInterface              0\n\t  Endpoint Descriptor:\n\t\tbLength                 7\n\t\tbDescriptorType         5\n\t\tbEndpointAddress     0x84  EP 4 IN\n\t\tbmAttributes            2\n\t\t  Transfer Type            Bulk\n\t\t  Synch Type               None\n\t\t  Usage Type               Data\n\t\twMaxPacketSize     0x0040  1x 64 bytes\n\t\tbInterval               0\n\t  Endpoint Descriptor:\n\t\tbLength                 7\n\t\tbDescriptorType         5\n\t\tbEndpointAddress     0x04  EP 4 OUT\n\t\tbmAttributes            2\n\t\t  Transfer Type            Bulk\n\t\t  Synch Type               None\n\t\t  Usage Type               Data\n\t\twMaxPacketSize     0x0040  1x 64 bytes\n\t\tbInterval               0\nDevice Status:     0x0000\n  (Bus Powered)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br></div></div></li><li><p>UDEV Rules</p><p>Create a new udev rule for serial adpater, <code>idVendor</code> and <code>idProduct</code> must be equal to values from <code>lsusb</code> command. The rule below creates device <code>/dev/zigbee-serial</code>:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;SUBSYSTEM==<span class="token entity" title="\\&quot;">\\&quot;</span>tty<span class="token entity" title="\\&quot;">\\&quot;</span>, ATTRS{idVendor}==<span class="token entity" title="\\&quot;">\\&quot;</span>0451<span class="token entity" title="\\&quot;">\\&quot;</span>, ATTRS{idProduct}==<span class="token entity" title="\\&quot;">\\&quot;</span>16a8<span class="token entity" title="\\&quot;">\\&quot;</span>, SYMLINK+=<span class="token entity" title="\\&quot;">\\&quot;</span>zigbee-serial<span class="token entity" title="\\&quot;">\\&quot;</span>,  RUN+=<span class="token entity" title="\\&quot;">\\&quot;</span>/usr/local/bin/docker-setup-zigbee-serial.sh<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/udev/rules.d/99-zigbee-serial.rules\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Reload newly created rule using the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> udevadm control --reload-rules\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Create docker-setup-zigbee-serial.sh</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /usr/local/bin/docker-setup-zigbee-serial.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Copy the following content:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n<span class="token assign-left variable">USBDEV</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>readlink -f /dev/zigbee-serial<span class="token variable">`</span></span>\n<span class="token builtin class-name">read</span> minor major <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">stat</span> -c <span class="token string">&#39;%T %t&#39;</span> <span class="token variable">$USBDEV</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -z <span class="token variable">$minor</span> <span class="token operator">||</span> -z <span class="token variable">$major</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">&#39;Device not found&#39;</span>\n\t<span class="token builtin class-name">exit</span>\n<span class="token keyword">fi</span>\n<span class="token assign-left variable">dminor</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">0</span>x${minor}<span class="token variable">))</span></span>\n<span class="token assign-left variable">dmajor</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">0</span>x${major}<span class="token variable">))</span></span>\n<span class="token assign-left variable">CID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> -a --no-trunc <span class="token operator">|</span> <span class="token function">grep</span> koenkk/zigbee2mqtt <span class="token operator">|</span> <span class="token function">head</span> -1 <span class="token operator">|</span>  <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">`</span></span>\n<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -z <span class="token variable">$CID</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">&#39;CID not found&#39;</span>\n\t<span class="token builtin class-name">exit</span>\n<span class="token keyword">fi</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&#39;Setting permissions&#39;</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;c <span class="token variable">$dmajor</span>:<span class="token variable">$dminor</span> rwm&quot;</span> <span class="token operator">&gt;</span> /sys/fs/cgroup/devices/docker/<span class="token variable">$CID</span>/devices.allow\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Set permissions:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">744</span> /usr/local/bin/docker-setup-zigbee-serial.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Create docker-event-listener.sh</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /usr/local/bin/docker-event-listener.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Copy the following content:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n<span class="token function">docker</span> events --filter <span class="token string">&#39;event=start&#39;</span><span class="token operator">|</span> <span class="token punctuation">\\</span>\n<span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span>\n\t/usr/local/bin/docker-setup-zigbee-serial.sh\n<span class="token keyword">done</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Set permissions:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">744</span> /usr/local/bin/docker-event-listener.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Create docker-event-listener.service</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/systemd/system/docker-event-listener.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Copy the following content:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>\n<span class="token assign-left variable">Description</span><span class="token operator">=</span>Docker Event Listener <span class="token keyword">for</span> Zigbee serial adapter\n<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target\n<span class="token assign-left variable">StartLimitIntervalSec</span><span class="token operator">=</span><span class="token number">0</span>\n<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>\n<span class="token assign-left variable">Type</span><span class="token operator">=</span>simple\n<span class="token assign-left variable">Restart</span><span class="token operator">=</span>always\n<span class="token assign-left variable">RestartSec</span><span class="token operator">=</span><span class="token number">1</span>\n<span class="token assign-left variable">User</span><span class="token operator">=</span>root\n<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/bin/bash /usr/local/bin/docker-event-listener.sh\n\n<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>\n<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Set permissions:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">744</span> /etc/systemd/system/docker-event-listener.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Reload daemon</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl daemon-reload\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Start Docker event listener</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start docker-event-listener.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Status Docker event listener</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl status docker-event-listener.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Enable Docker event listener</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker-event-listener.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Verify and deploy Zigbee2MQTT stack</p><p>Now reconnect the serial adapter. Verify using the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ls</span> -al /dev/zigbee-serial\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">7</span> Sep <span class="token number">28</span> <span class="token number">21</span>:14 /dev/zigbee-serial -<span class="token operator">&gt;</span> ttyACM0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Below an example of a <code>docker-stack-zigbee2mqtt.yml</code>:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.7&quot;</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">zigbee2mqtt</span><span class="token punctuation">:</span>\n\t<span class="token key atrule">image</span><span class="token punctuation">:</span> koenkk/zigbee2mqtt<span class="token punctuation">:</span>latest<span class="token punctuation">-</span>dev\n\t<span class="token key atrule">environment</span><span class="token punctuation">:</span>\n\t  <span class="token punctuation">-</span> TZ=Europe/Amsterdam\n\t<span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n\t  <span class="token punctuation">-</span> /mnt/docker<span class="token punctuation">-</span>cluster/zigbee2mqtt/data<span class="token punctuation">:</span>/app/data\n\t  <span class="token punctuation">-</span> /dev/zigbee<span class="token punctuation">-</span>serial<span class="token punctuation">:</span>/dev/zigbee<span class="token punctuation">-</span>serial\n\t<span class="token key atrule">networks</span><span class="token punctuation">:</span>\n\t  <span class="token punctuation">-</span> proxy_traefik<span class="token punctuation">-</span>net\n\t<span class="token key atrule">deploy</span><span class="token punctuation">:</span>\n\t  <span class="token key atrule">placement</span><span class="token punctuation">:</span>\n\t\t<span class="token key atrule">constraints</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>node.hostname == rpi<span class="token punctuation">-</span><span class="token number">3</span><span class="token punctuation">]</span>\n\t  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>\n\n<span class="token key atrule">networks</span><span class="token punctuation">:</span>\n  <span class="token key atrule">proxy_traefik-net</span><span class="token punctuation">:</span>\n\t<span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>In the above example, <code>proxy_traefik-net</code> is the network to connect to the mqtt broker. The constraint makes sure Docker deploys only to this (<code>rpi-3</code>) node, where the serial adapter is connected to. The volume binding <code>/mnt/docker-cluster/zigbee2mqtt/data</code> is the zigbee2mqtt persistent directory, where <code>configuration.yaml</code> is saved.</p><p>The zigbee2Zigbee2MQTTmqtt <code>configuration.yaml</code> should point to <code>/dev/zigbee-serial</code>:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">[</span><span class="token punctuation">...</span><span class="token punctuation">]</span>\n<span class="token key atrule">serial</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> /dev/zigbee<span class="token punctuation">-</span>serial\n<span class="token punctuation">[</span><span class="token punctuation">...</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Deploy the stack:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> stack deploy zigbee2mqtt --compose-file docker-stack-zigbee2mqtt.yml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h3 id="troubleshooting" tabindex="-1"><a class="header-anchor" href="#troubleshooting" aria-hidden="true">#</a> Troubleshooting</h3><p>It could happen that even after the above the container is not starting correctly and bringing a &quot;Operation not permitted&quot; message in the log of the service for the device:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Error: Error while opening serialport &#39;Error: Error: Operation not permitted, cannot open /dev/zigbee-serial&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This is due to the usage of cgroupv2 instead of cgroupv1 which is not fully supported by docker/containerd. To switch from cgroupv2 to cgroupv1 you have to add <code>systemd.unified_cgroup_hierarchy=false</code> to the grub cmdline. E.g. on an Raspberry Pi 4 with Raspian Bullseye you can add it to the end of the line in the /boot/cmdline.txt file:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[...] rootfstype=ext4 fsck.repair=yes rootwait cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 systemd.unified_cgroup_hierarchy=false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="docker-on-synology-dsm-7-0" tabindex="-1"><a class="header-anchor" href="#docker-on-synology-dsm-7-0" aria-hidden="true">#</a> Docker on Synology DSM 7.0</h2><blockquote><p><strong><em>NOTE:</em></strong> This may not work with all Zigbee controllers, but has been tested with the CC2531.</p></blockquote><p>As of Disk Station Manager version 7, Synology removed the built-in support for USB-devices like a Zigbee controller. The USB support can be installed to the Linux kernel by issuing the following commands as <em>root</em>.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>modprobe usbserial\nmodprobe ftdi_sio\nmodprobe cdc-acm\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>After issuing the commands, the Zigbee controller may need to be unplugged and re-inserted to the USB port.</p><p>You may also need additional drivers based on your USB Zigbee controlller setup, e.g. CH341 module is not included by default. You can download precompiled modules from jadahl.com pages - select module directory based on NAS CPU architecture (DS218+ -&gt; INTEL Celeron J3355 -&gt; Apollo Lake).</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cd /lib/modules\nwget http://www.jadahl.com/iperf-arp-scan/DSM_7.0/apollolake/ch341.ko\ninsmod /lib/modules/ch341.ko\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>It is possible to create a start-up task that issues the above commands:</p><ol><li>Create an executable script file that contains the three modprobe commands.</li><li>Using DSM&#39;s <em>Control Panel</em> -&gt; <em>Task Scheduler</em> -&gt; <em>Create</em> -&gt; <em>Triggered Task</em> -&gt; <em>User-defined script</em> with the settings: <strong>User:</strong> root, <strong>Event:</strong> Boot-up, and a <code>bash</code> command executing the executable file under <em>Task Settings</em>.</li></ol>',15),_={},E=(0,e(83744).Z)(_,[["render",function(n,s){const e=(0,a.up)("OutboundLink"),_=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,(0,a._)("p",null,[l,(0,a._)("a",p,[r,(0,a.Wm)(e)]),o]),i,(0,a._)("p",null,[c,(0,a.Wm)(_,{to:"/guide/installation/01_linux.html#determine-location-of-the-adapter-and-checking-user-permissions"},{default:(0,a.w5)((()=>[u])),_:1}),b]),d,(0,a._)("p",null,[m,(0,a.Wm)(_,{to:"/guide/installation/01_linux.html#configuring"},{default:(0,a.w5)((()=>[k])),_:1}),g]),h,(0,a._)("ul",null,[v,(0,a._)("li",null,[f,(0,a._)("a",y,[x,(0,a.Wm)(e)]),w,T]),D]),C,(0,a._)("p",null,[q,(0,a._)("a",S,[U,(0,a.Wm)(e)]),z]),I],64)}]])},83744:(n,s)=>{s.Z=(n,s)=>{for(const[e,a]of s)n[e]=a;return n}}}]);