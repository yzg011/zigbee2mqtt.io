"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[64585],{92705:(e,t,i)=>{i.r(t),i.d(t,{data:()=>l});const l={key:"v-65dca6ad",path:"/devices/CC2530.ROUTER.html",title:"Custom devices (DiY) CC2530.ROUTER control via MQTT",lang:"en-US",frontmatter:{title:"Custom devices (DiY) CC2530.ROUTER control via MQTT",description:"Integrate your Custom devices (DiY) CC2530.ROUTER via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor's bridge or gateway.",addedAt:"2019-07-22T20:08:17.000Z",pageClass:"device-page"},excerpt:"",headers:[{level:2,title:"Notes",slug:"notes",children:[{level:3,title:"Pairing",slug:"pairing",children:[]}]},{level:2,title:"Exposes",slug:"exposes",children:[{level:3,title:"Led (binary)",slug:"led-binary",children:[]},{level:3,title:"Linkquality (numeric)",slug:"linkquality-numeric",children:[]}]}],filePathRelative:"devices/CC2530.ROUTER.md",git:{updatedTime:1661706754e3}}},40562:(e,t,i)=>{i.r(t),i.d(t,{default:()=>m});var l=i(66252);const a=(0,l._)("h1",{id:"custom-devices-diy-cc2530-router",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#custom-devices-diy-cc2530-router","aria-hidden":"true"},"#"),(0,l.Uk)(" Custom devices (DiY) CC2530.ROUTER")],-1),r=(0,l._)("thead",null,[(0,l._)("tr",null,[(0,l._)("th"),(0,l._)("th")])],-1),n=(0,l._)("tr",null,[(0,l._)("td",null,"Model"),(0,l._)("td",null,"CC2530.ROUTER")],-1),o=(0,l._)("tr",null,[(0,l._)("td",null,"Vendor"),(0,l._)("td",null,"Custom devices (DiY)")],-1),d=(0,l._)("td",null,"Description",-1),s={href:"http://ptvo.info/cc2530-based-zigbee-coordinator-and-router-112/",target:"_blank",rel:"noopener noreferrer"},u=(0,l.Uk)("CC2530 router"),c=(0,l._)("tr",null,[(0,l._)("td",null,"Exposes"),(0,l._)("td",null,"led, linkquality")],-1),h=(0,l._)("tr",null,[(0,l._)("td",null,"Picture"),(0,l._)("td",null,[(0,l._)("img",{src:"https://www.zigbee2mqtt.io/images/devices/CC2530.ROUTER.jpg",alt:"Custom devices (DiY) CC2530.ROUTER"})])],-1),p=(0,l.uE)('<h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><h3 id="pairing" tabindex="-1"><a class="header-anchor" href="#pairing" aria-hidden="true">#</a> Pairing</h3><p>At first boot it will automatically be in pairing mode and join your network. To reset it into pairing mode power-cycle it three times as follows:</p><ol><li>power on</li><li>wait 2sec</li><li>power off</li><li>repeat above steps 2 further times</li><li>power on and wait for it to join your network</li></ol><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes" aria-hidden="true">#</a> Exposes</h2><h3 id="led-binary" tabindex="-1"><a class="header-anchor" href="#led-binary" aria-hidden="true">#</a> Led (binary)</h3><p>Value can be found in the published state on the <code>led</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> led is ON, if <code>false</code> OFF.</p><h3 id="linkquality-numeric" tabindex="-1"><a class="header-anchor" href="#linkquality-numeric" aria-hidden="true">#</a> Linkquality (numeric)</h3><p>Link quality (signal strength). Value can be found in the published state on the <code>linkquality</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The minimal value is <code>0</code> and the maximum value is <code>255</code>. The unit of this value is <code>lqi</code>.</p>',9),v={},m=(0,i(83744).Z)(v,[["render",function(e,t){const i=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[a,(0,l._)("table",null,[r,(0,l._)("tbody",null,[n,o,(0,l._)("tr",null,[d,(0,l._)("td",null,[(0,l._)("a",s,[u,(0,l.Wm)(i)])])]),c,h])]),p],64)}]])},83744:(e,t)=>{t.Z=(e,t)=>{for(const[i,l]of t)e[i]=l;return e}}}]);